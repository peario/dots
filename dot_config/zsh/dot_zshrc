#!/usr/bin/zsh
# The following lines were added by compinstall

# Configure menu selection for completion options in all contexts
# (indicated by the wildcard `*`)
zstyle ':completion:*' menu select

# forces zsh to realize new commands
# might be useful if new commands have been installed during the session
zstyle ':completion:*' completer _oldlist _expand _complete _match _ignored _approximate

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# Group matches and describe.
zstyle ':completion:*' sort false
zstyle ':completion:complete:*:options' sort false
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# rehash if command not found
# (possibly recently installed)
zstyle ':completion:*' rehash true

# Job IDs
zstyle ':completion:*:jobs' numbers true
zstyle ':completion:*:jobs' verbose true

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# No correction
zstyle ':completion:*' completer _oldlist _expand _complete _files _ignored

# Don't insert tabs when there is no completion (e.g. beginning of line)
zstyle ':completion:*' insert-tab false

# allow one error for every three characters typed in approximate completer
zstyle ':completion:*:approximate:' max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

# start menu completion only if it could find no unambiguous initial string
zstyle ':completion:*:correct:*' insert-unambiguous true
zstyle ':completion:*:corrections' format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
zstyle ':completion:*:correct:*' original true

# List directory completions first
zstyle ':completion:*' list-dirs-first true
# Offer the original completion when using expanding / approximate completions
zstyle ':completion:*' original true
# Treat multiple slashes as a single / like UNIX does (instead of as /*/)
zstyle ':completion:*' squeeze-slashes true

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# separate matches into groups
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''

zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:options' auto-description '%d'

# describe options in full
zstyle ':completion:*:options' description 'yes'

# on processes completion complete all user processes
zstyle ':completion:*:processes' command 'ps -a -u $USER'

# Ignore completion functions for commands you don't have:
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# complete manual by their section
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections true
zstyle ':completion:*:man:*' menu yes select

# provide .. as a completion
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' special-dirs ..

# Use caching so that some commands commands (such as apt and dpkg complete)
# are useable
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path "$ZSH_CACHE_DIR"

# Don't try to expand multiple partial paths.
zstyle ':completion:*' path-completion false

zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s

# Make zsh know about hosts already accessed by SSH
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

zstyle :compinstall filename '/Users/peario/.config/zsh/.zshrc'

# Load compinit
autoload -Uz compinit

_comp_options+=(globdots)
zcompdump="$HOME"/.local/share/zsh/.zcompdump-"$ZSH_VERSION"-"$(date -I)"
compinit -d "$HOME/.config/zsh/$zcompdump"

# Recompile zcompdump if it exists and is newer than zcompdump.zwc
# compdumps are marked with the current date in yyyy-mm-dd format
# which means this is likely to recompile daily
# also see: <https://htr3n.github.io/2018/07/faster-zsh/>
if [[ -s "$HOME/.config/zsh/$zcompdump" && (! -s "$HOME/.config/zsh/$zcompdump".zwc || "$HOME/.config/zsh/$zcompdump" -nt "$HOME/.config/zsh/$zcompdump".zwc) ]]; then
    zcompile "$HOME/.config/zsh/$zcompdump"
fi

# Load bash completion functions.
autoload -U +X bashcompinit && bashcompinit
# End of lines added by compinstall

# Hyperoptimized time format for the time command
# the definition of the format is as follows:
# - "[%J]": The name of the job.
# - "%uU user": CPU seconds spent in user mode.
# - "%uS system": CPU seconds spent in kernel mode.
# - "%uE/%*E elapsed": Elapsed time in seconds
# - "%P CPU": The CPU percentage, computed as 100*(%U+%S)/%E.
# - "(%X avgtext + %D avgdata + %M maxresident)k": The average amount in (shared) text space used in kilobytes, the
# average amount in (unshared) data/stack space used in kilobytes, and the maximum memory
# the process had in use at any time in kilobytes.
# - "[%I inputs / %O outputs]": Number of input and output operations
# - "(%Fmajor + %Rminor) pagefaults": The number of major & minor page faults.
# - "%W swaps": The number of times the process was swapped.
TIMEFMT=$'\033[1m[%J]\033[0m: %uU user | %uS system | %uE/%*E elapsed | %P CPU\n> (%X avgtext + %D avgdata + %M maxresident)k used\n> [%I inputs / %O outputs] | (%Fmajor + %Rminor) pagefaults | %W swaps'

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm* | rxvt* | Eterm | aterm | kterm | gnome* | alacritty | kitty*)
        TERM_TITLE=$'\e]0;%n@%m: %1~\a'
        ;;
    *) ;;
esac

# enable keyword-style arguments in shell functions
set -k

# Colors
autoload -Uz colors && colors

# Autosuggest
ZSH_AUTOSUGGEST_USE_ASYNC="true"
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_HISTORY_IGNORE=$'*\n*'

# open commands in $EDITOR
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^e" edit-command-line

# Modules
# zsh Line Editor (ZLE) module
# interactive line editing in the shell
zmodload zsh/zle

# zsh pseudo-terminal (PTY) module
# control interactive processes
zmodload zsh/zpty

# zsh completion list (complist) module
# manage and display completion list
zmodload zsh/complist

# zsh interface to locale information
zmodload zsh/langinfo

# Lines configured by zsh-newuser-isntall
HISTFILE="$HOME/.config/zsh/histfile"
HISTSIZE=5000
SAVEHIST=3000
setopt autocd
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"

[ -f "$HOME/.config/zsh/libs.zsh" ] && source "$HOME/.config/zsh/libs.zsh"
[ -f "$HOME/.config/zsh/options.zsh" ] && source "$HOME/.config/zsh/options.zsh"
[ -f "$HOME/.config/zsh/alias.zsh" ] && source "$HOME/.config/zsh/alias.zsh"

# Homebrew
if [ -d "/opt/homebrew/bin" ] || command -v brew 1> /dev/null; then
    eval "$(/opt/homebrew/bin/brew shellenv)"

    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

    autoload -Uz compinit
    compinit
fi

# Perl
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"

# Java / Kotlin
JAVA_HOME="${JAVA_HOME:-$HOME/Applications/Android Studio.app/Contents/jbr/Contents/Home}"
if [ -d "$JAVA_HOME" ]; then
    export JAVA_HOME

    ANDROID_HOME="${ANDROID_HOME:-$HOME/Library/Android/sdk}"
    NDK_HOME="$ANDROID_HOME/ndk/$(/bin/ls -1 $ANDROID_HOME/ndk)"

    if [ -d "$ANDROID_HOME" ]; then
        export ANDROID_HOME

        # Only export NDK_HOME if ANDROID_HOME is defined (due to it not being a valid path otherwise)
        [ -d "$NDK_HOME" ] && export NDK_HOME
    fi
fi

# Golang
if [ -d "$HOME/.go" ] || [ -d "$HOME/go" ] || command -v go 1> /dev/null; then
    [ -d "$HOME/.go" ] && GOROOT=${GOROOT:-$HOME/.go}
    [ -d "$HOME/go" ] && GOPATH=${GOPATH:-$HOME/go}
    [ -d "$HOME/go/bin" ] && path+=("$HOME/go/bin")

    path+=(/usr/local/go/bin)
fi

# Rust
if [ -d "$HOME/.cargo/bin" ] || command -v cargo 1> /dev/null; then
    path+=("$HOME/.cargo/bin")
fi

# Ruby
if command -v rbenv 1> /dev/null; then
    eval "$(rbenv init - --no-rehash zsh)"

    if [[ ":$FPATH:" != *":$HOME/.rbenv/completions:"* ]]; then
        export FPATH="$HOME/.rbenv/completions:$FPATH"
    fi
fi

# Nim
[ -d "$HOME/.nimble/bin" ] && path+=("$HOME/.nimble/bin")

# Python
## Installing packages via `pipx` places them here
[ -d "$HOME/.local/bin" ] && path+=("$HOME/.local/bin")

# FZF
if command -v fzf 1> /dev/null; then
    [ -f $HOME/.config/zsh/fzf.zsh ] && source "$HOME/.config/zsh/fzf.zsh"
    source <(fzf --zsh) # Setup fzf key bindings and fuzzy completion
fi

# Direnv
if command -v direnv 1> /dev/null; then
    eval "$(direnv hook zsh)"
fi

# Add completions to search path
if [[ ":$FPATH:" != *":$HOME/.config/zsh/completions:"* ]]; then
    export FPATH="$HOME/.config/zsh/completions:$FPATH"
fi

if [[ ":$FPATH:" != *":/opt/homebrew/share/zsh/site-functions:"* ]]; then
    export FPATH="/opt/homebrew/share/zsh/site-functions:$FPATH"
fi

# Shell prompt
if command -v starship 1> /dev/null; then
    eval "$(starship init zsh)"
    eval "$(starship completions zsh)"
fi

# For diesel.rs
## MySQL
if [[ -d "/opt/homebrew/opt/mysql-client/lib/pkgconfig" ]]; then
    export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/mysql-client/lib/pkgconfig"
fi

## PostgreSQL
if [[ -d "/opt/homebrew/opt/libpq/lib/pkgconfig" ]]; then
    export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/libpq/lib/pkgconfig"

    export PQ_LIB_DIR="$(brew --prefix libpq)/lib"

    # NOTE: If you still can't install resolve libpq and ld issue, try reading this:
    # - https://stackoverflow.com/a/70561227
fi

## SQLite3
if [[ -d "/opt/homebrew/opt/sqlite/lib/pkgconfig" ]]; then
    export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/sqlite/lib/pkgconfig"
fi

# Like bat, but for viewing diffs
command -v delta 1> /dev/null && eval "$(delta --generate-completion zsh)"

# bat, 'cat'-replacement
if command -v bat 1> /dev/null; then
    alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
    alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'

    # FIX: Broken
    # eval "$(bat --completion zsh)"

    # Man, use bat to color manpage
    export MANPAGER="sh -c 'sed -u -e \"s/\\x1B\[[0-9;]*m//g; s/.\\x08//g\" | bat -p -lman'"
    # man 2 select
fi

# Movement, replaces cd with zoxide for traversing
command -v zoxide 1> /dev/null && eval "$(zoxide init zsh --cmd cd)"

# FNM - Node.js Version Manager
if command -v fnm 1> /dev/null; then
    FNM_PATH="$HOME/.local/share/fnm"

    # Shorthand test if path exists, if not install FNM to $FNM_PATH
    # The latter part of this command can be used to update FNM.
    [ ! -d "$FNM_PATH" ] && { curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "$FNM_PATH" --skip-shell; }

    path+=("$FNM_PATH")

    eval "`fnm env`"
    eval "$(fnm completions --shell zsh)"
fi

if command -v pnpm 1> /dev/null; then
  export PNPM_HOME="/Users/peario/Library/pnpm"
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
fi

# Less
if [ -f "/opt/homebrew/bin/lesspipe.sh" ]; then
    export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s"
fi

# Bun
if command -v bun 1> /dev/null; then
    export BUN_INSTALL="$HOME/.bun"

    [ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"
    path+=("$BUN_INSTALL/bin")
fi

# Chezmoi (dotfiles manager)
if command -v chezmoi 1> /dev/null; then
  eval "$(chezmoi completion zsh)"
fi

# Deno
# if command -v deno 1> /dev/null; then
#     source "$HOME/.deno/env"
# fi

# Lua v5.1 (custom install)
export LUA="$HOME/.lua"
[ -d "$LUA" ] && source "$LUA/.profile"

# Added by Toolbox App
path+=("/Users/peario/Library/Application Support/JetBrains/Toolbox/scripts")

# WARN: THIS SHOULD BE SECOND TO LAST
# "landing page" of the terminal
command -v macchina 1> /dev/null && macchina

# WARN: THIS SHOULD BE LAST
# Antigen - Zsh package manager
if [ -f $HOME/.config/zsh/antigen.zsh ]; then
    typeset -a ANTIGEN_CHECK_FILES=(${ZDOTDIR:-~}/.zshrc ${ZDOTDIR:-~}/antigen.zsh)

    export ADOTDIR="$HOME/.config/zsh/.antigen"
    source "$HOME/.config/zsh/antigen.zsh"

    # Plugins
    # NOTE: Appending `2>&1` to `1>/dev/null` causes both stderr (2) and stdout (1) to be piped to `/dev/null`
    antigen bundle command-not-found 1>/dev/null
    antigen bundle copybuffer 1>/dev/null
    antigen bundle gh 1>/dev/null
    antigen bundle tldr 1>/dev/null # tlrc is the command installed (rust version of tldr)
    antigen bundle web-search 1>/dev/null

    # Auto suggestions
    antigen bundle zsh-users/zsh-completions 1>/dev/null
    antigen bundle zsh-users/zsh-autosuggestions 1>/dev/null
    antigen bundle zsh-users/zsh-history-substring-search 1>/dev/null

    # Syntax highlighting should be last of all these packages
    # Probably last of everything within `$HOME/.config/zsh/.zshrc` as well.
    antigen bundle zsh-users/zsh-syntax-highlighting 1>/dev/null

    antigen apply
fi
